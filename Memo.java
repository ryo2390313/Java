//[ユニコード(Unicode)]
//すべての文字に固有の番号を与える。
//プラットフォームに依存しない
//言語に依存しない
//プログラムに依存しない





//[クラス(class)]
//データや処理をグループごとに分けて管理するためのもの
//プログラムの種類や機能を宣言するために用いられる
//メソッドと呼ばれる機能やフィールドと呼ばれるデータがはいる。
//メソッドを持っている
//設計図


//[オブジェクト] = インスタンス
//モノや人間を表す
//属性と操作という2つの要素から成り立つ
//決まった形
//※オブジェクト指向というプログラミングの概念ではオブジェクトを作るためのクラスやオブジェクト指向の手続きを指すことです。
//例：ホテルの部屋の形


//[オブジェクト指向]
//効率よく開発するための考えの１つ
//カプセル化(独立性)
//継承(再利用性)
//ポリモーフィズム(拡張子)

//[コンストラクタ]
//コンストラクタは初期化を行う
//@param name 名前
//@param job 職業
//---public Teacher(String name, String job, String subject)---//

//[new]
//newはコンストラクタの初期化を呼び出す役割


//[抽象クラス]
// 実際の処理を書かないで良し
// 抽象ってことは、あいまいってこと
// ここで記載することは器（プロパティ、メソッド名）を記載するだけ
//※ただし、コンストラクタは記載OK
//※処理の内容などは継承先などでオーバーライドして処理する


//[抽象メソッド]
//abstract 型　メソッド名（引数）
//---abstract void introduce():---//


//[配列（リスト）]
//配列とは、同じかたのデータ集合を扱う入れ物
//配列は、値を入れておく箱(変数)が複数くっついて、箱の数の分だけ値を入れておけるようになったもの
//配列を使うと、同じ種類のデータを効率的に管理できます
//---int[] list = {1,2,3,4,5,6,7,8,9,10};---//


//[例外]
//Exceptionは例外という意味
//例：数字を０で割ったときなど
//try・catch・finallyの３つの例外処理
//(try文)
//{}で囲んだところが対象
//tryブロック　　　　try{}何らかの処理　　　＊必須＊
//tryブロックの実行中に例外が送出されると、処理が中断されて、catch節へとプログラムの流れが移動する
//バッター

//catch節　　　　　　catch (ExpA e) {}対処を行う
//                　catch (ExpB e) {}対処を行う
//tryブロック実行中に発生した例外を補足して、その例外に対する対処を行う部分
//catchに続く()の中は、補足する例外の種類を示す型と、その借り引数名のせんげんです。
//外野手

//finally節　　　　　finally {}後始末
//あとかたずけ的

//throw
//例外を投げる
//ピッチャー(投げる)

//throws



//[例外処理]
//Throwable すべての例外クラスの中で頂点


//[文字]
//char型
//数字も文字も入れられるが"ではなく'で囲むそして１文字につき１変数
//ショートと互換性がある

//Stringクラス
//クラスなのでメソッドがある

//変数を比較するとき
//数字なら==などで比較できる
//String型のメソッドの参照型の場合は
//変数.equals(s)　←　(文字の比較の時)

//StringBuilder クラス
//


//[コマンドライン引数]
//


//[ラッパクラス]
//基本型        ラッパクラス
//byte         Byte
//short        Short
//int          Integer
//long         Long
//float        Float
//double       Double
//char         Character
//boolean      Boolean
